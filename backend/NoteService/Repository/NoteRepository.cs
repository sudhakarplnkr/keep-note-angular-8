using System;
using System.Collections.Generic;
using System.Linq;
using MongoDB.Driver;
using NoteService.Models;

namespace NoteService.Repository
{
    public class NoteRepository : INoteRepository
    {
        //define a private variable to represent NoteContext
        private readonly NoteContext noteContext;

        public NoteRepository(NoteContext _context)
        {
            noteContext = _context;
        }

        //This method should be used to create a new note. NoteId should be autogenerated and
        // must start with 101.This should create a new NotUser if not exists else should push 
        //new note entry into existing NoteUser collection. UserId is identified by CreatedBy
        public bool CreateNote(Note note)
        {
            var recent = noteContext.Notes.Find(f => f.UserId == note.CreatedBy).FirstOrDefault();
            Note latestNotes = null;
            if (recent != null)
            {
                latestNotes = recent.Notes.OrderByDescending(o => o.Id).FirstOrDefault();
            }
            
            var id = 101;
            if (latestNotes != null)
            {
                id = latestNotes.Id + 1;
            }
            note.Id = id;
            note.CreationDate = DateTime.Now;

            var userNote = noteContext.Notes.Find(f => f.UserId == note.CreatedBy).FirstOrDefault();
            if (userNote != null)
            {
                userNote.Notes.Add(note);
                noteContext.Notes.ReplaceOne(ns => ns.UserId == note.CreatedBy, userNote);
            }
            else
            {                
                noteContext.Notes.InsertOne(new NoteUser
                {
                    UserId = note.CreatedBy,
                    Notes = new List<Note> { note }
                });
            }

            return true;
        }

        //This method should be used to retreive all notes for a user
        public List<Note> FindAllNotesByUser(string userId)
        {
            var userNotes = noteContext.Notes.Find(n => n.UserId == userId).FirstOrDefault();
            if (userNotes == null)
            {
                return new List<Note>();
            }
            return userNotes.Notes;
        }

        //This method should be used to delete a note for a specific user
        public bool DeleteNote(string userId, int noteId)
        {
            var user = noteContext.Notes.Find(f => f.UserId == userId).FirstOrDefault();
            if (user == null)
            {
                return false;
            }

            var note = user.Notes.Where(u => u.Id == noteId).FirstOrDefault();
            if (note == null)
            {
                return false;
            }

            if (user.Notes.Count > 1)
            {
                noteContext.Notes.ReplaceOne(n => n.UserId == userId, new NoteUser
                {
                    UserId = userId,
                    Notes = user.Notes.Where(u => u.Id != noteId).ToList()
                });
            }
            else
            {
                noteContext.Notes.DeleteOne(n => n.UserId == userId);
            }
            return true;
        }

        //This method is used to update an existing note for a user
        public bool UpdateNote(int noteId, string userId, Note note)
        {
            var userNote = noteContext.Notes.Find(f => f.UserId == userId).FirstOrDefault();
            if (userNote == null)
            {
                return false;
            }

            var originalNote = userNote.Notes.Where(u => u.Id == noteId).FirstOrDefault();
            if (originalNote == null)
            {
                return false;
            }

            note.Id = noteId;
            var notes = userNote.Notes.Where(u => u.Id != noteId).ToList();
            notes.Add(note);
            userNote.Notes = notes;
            noteContext.Notes.ReplaceOne(c => c.UserId == userId, userNote);
            return true;
        }
    }
}
